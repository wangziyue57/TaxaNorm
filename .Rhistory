llk_H1 <- llk.full
llk_H0 <- llk.null
df_H1 <- res$df
df_H0 <- sapply(fit_reduce_1, function(x) x$df.residual)
}else{
llk_H1 <- llk.full[-na]
llk_H0 <- llk.null[-na]
df_H1 <- df_H1 <- res$df[-na]
df_H0 <- sapply(fit_reduce_1, function(x) x$df.residual)[-na]
}
df <- sum(df_H0) - sum(df_H1)
chi_stat <- 2 * (sum(llk_H1) - sum(llk_H0))
pvalue_1 <- pchisq(chi_stat, df = df, lower.tail = FALSE)
} else {pvalue_1 <- NA}
count[1,]
count[i,] ~ 1 + group | 1 | 1
count[1,]
fit_reduce_1[[i]] <- suppressWarnings(zinb.reg(formula = count[i,] ~ 1 + group | 1 | 1,
control = zinb.control(trace=FALSE)))
View(count)
typeof(count[1,])
count[1,]
View(count)
typeof(count[1])
typeof(count[2])
count[1,]
as.numeric(count[1,])
fit_reduce_1 <- list()
for (i in 1:nrow(count)) {
zero <- sum(count[i,]==0)
if(zero >= 10){
if(is.null(group)){
fit_reduce_1[[i]] <- suppressWarnings(suppressWarnings(zinb.reg(formula = as.numeric(count[i,]) ~ 1 | 1 | 1,
control = zinb.control(trace=FALSE, EM=TRUE))))
}else{
fit_reduce_1[[i]] <- suppressWarnings(zinb.reg(formula = as.numeric(count[i,]) ~ 1 + group | 1 | 1,
control = zinb.control(trace=FALSE)))
}
}
if(zero < 10){
if(is.null(group)){
fit_reduce_1[[i]] <- suppressWarnings(suppressWarnings(nb.reg(formula = as.numeric(count[i,]) ~ 1 | 1,
control = zinb.control(trace=FALSE, EM=TRUE))))
}else{
fit_reduce_1[[i]] <- suppressWarnings(suppressWarnings(nb.reg(formula = as.numeric(count[i,]) ~ 1 + group | 1,
control = zinb.control(trace=FALSE, EM=TRUE))))
}
}
}
if (any(sapply(fit_reduce_1, inherits, "try-error")==TRUE)) {
fit_reduce_1 <- fit_reduce_1[-which(sapply(fit_reduce_1, inherits, "try-error")==TRUE)]
}
llk.null <- sapply(fit_reduce_1, function(x) x$loglik)
# lrt test
na <- unique(c(which(is.na(llk.full)), which(is.na(llk.null))))
if(length(na) == 0){
llk_H1 <- llk.full
llk_H0 <- llk.null
df_H1 <- res$df
df_H0 <- sapply(fit_reduce_1, function(x) x$df.residual)
}else{
llk_H1 <- llk.full[-na]
llk_H0 <- llk.null[-na]
df_H1 <- df_H1 <- res$df[-na]
df_H0 <- sapply(fit_reduce_1, function(x) x$df.residual)[-na]
}
df <- sum(df_H0) - sum(df_H1)
chi_stat <- 2 * (sum(llk_H1) - sum(llk_H0))
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(TaxNorm)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(TaxNorm)
library(phyloseq)
library(microbiome)
library(ggplot2)
library(vegan)
library(MASS)
data("TaxNorm_Example_Input", package = "TaxNorm")
library(TaxNorm)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(TaxNorm)
library(phyloseq)
library(microbiome)
library(ggplot2)
library(vegan)
library(MASS)
data("TaxNorm_Example_Input", package = "TaxNorm")
# run normalization
Normalized_Data <- TaxNorm_Normalization(data= TaxNorm_Example_Input,
depth = NULL,
group = sample_data(TaxNorm_Example_Input)$body_site,
meta.data = NULL,
filter.cell.num = 10,
filter.taxa.count = 0,
random = FALSE,
ncores = NULL)
save(Normalized_Data, file = "sample_taxnormresults.RData")
Normalized_Results = Normalized_Data
# extract info from run_norm() output (full model)
res <- Normalized_Results
count <- rawdata(res)
llk.full <- llk(res)
# fit reduced model
# test 1: existence of effect or not; by fitting intercept-only regression
if(prev){
fit_reduce_1 <- list()
for (i in 1:nrow(count)) {
zero <- sum(count[i,]==0)
if(zero >= 10){
if(is.null(group)){
fit_reduce_1[[i]] <- suppressWarnings(suppressWarnings(zinb.reg(formula = as.numeric(count[i,]) ~ 1 | 1 | 1,
control = zinb.control(trace=FALSE, EM=TRUE))))
}else{
fit_reduce_1[[i]] <- suppressWarnings(zinb.reg(formula = as.numeric(count[i,]) ~ 1 + group | 1 | 1,
control = zinb.control(trace=FALSE)))
}
}
if(zero < 10){
if(is.null(group)){
fit_reduce_1[[i]] <- suppressWarnings(suppressWarnings(nb.reg(formula = as.numeric(count[i,]) ~ 1 | 1,
control = zinb.control(trace=FALSE, EM=TRUE))))
}else{
fit_reduce_1[[i]] <- suppressWarnings(suppressWarnings(nb.reg(formula = as.numeric(count[i,]) ~ 1 + group | 1,
control = zinb.control(trace=FALSE, EM=TRUE))))
}
}
}
if (any(sapply(fit_reduce_1, inherits, "try-error")==TRUE)) {
fit_reduce_1 <- fit_reduce_1[-which(sapply(fit_reduce_1, inherits, "try-error")==TRUE)]
}
llk.null <- sapply(fit_reduce_1, function(x) x$loglik)
# lrt test
na <- unique(c(which(is.na(llk.full)), which(is.na(llk.null))))
if(length(na) == 0){
llk_H1 <- llk.full
llk_H0 <- llk.null
df_H1 <- res$df
df_H0 <- sapply(fit_reduce_1, function(x) x$df.residual)
}else{
llk_H1 <- llk.full[-na]
llk_H0 <- llk.null[-na]
df_H1 <- df_H1 <- res$df[-na]
df_H0 <- sapply(fit_reduce_1, function(x) x$df.residual)[-na]
}
df <- sum(df_H0) - sum(df_H1)
chi_stat <- 2 * (sum(llk_H1) - sum(llk_H0))
pvalue_1 <- pchisq(chi_stat, df = df, lower.tail = FALSE)
} else {pvalue_1 <- NA}
# test 2: equivalence of effect or not; by fitting offset() term
if(equiv){
fit_reduce_2 <- list()
for (i in 1:nrow(count)) {
zero <- sum(count[i,]==0)
if(zero >= 10){
if(is.null(group)){
fit_reduce_2[[i]] <- suppressWarnings(suppressWarnings(zinb.reg(formula = count[i,] ~ offset(log(depth)) | 1 | 1,
control = zinb.control(trace=FALSE, EM=TRUE))))
}else{
fit_reduce_2[[i]] <- suppressWarnings(zinb.reg(formula = count[i,] ~ offset(log(depth)) + group | 1 | 1,
control = zinb.control(trace=FALSE)))
}
}
if(zero < 10){
if(is.null(group)){
fit_reduce_2[[i]] <- suppressWarnings(suppressWarnings(nb.reg(formula = count[i,] ~ offset(log(depth)) | 1,
control = zinb.control(trace=FALSE, EM=TRUE))))
}else{
fit_reduce_2[[i]] <- suppressWarnings(suppressWarnings(nb.reg(formula = count[i,] ~ offset(log(depth)) + group | 1,
control = zinb.control(trace=FALSE, EM=TRUE))))
}
}
}
if (any(sapply(fit_reduce_2, inherits, "try-error")==TRUE)) {
fit_reduce_2 <- fit_reduce_2[-which(sapply(fit_reduce_2, inherits, "try-error")==TRUE)]
}
llk.null <- sapply(fit_reduce_2, function(x) x$loglik)
# lrt test
na <- unique(c(which(is.na(llk.full)), which(is.na(llk.null))))
if(length(na) == 0){
llk_H1 <- llk.full
llk_H0 <- llk.null
df_H1 <- res$df
df_H0 <- sapply(fit_reduce_2, function(x) x$df.residual)
}else{
llk_H1 <- llk.full[-na]
llk_H0 <- llk.null[-na]
df_H1 <- df_H1 <- res$df[-na]
df_H0 <- sapply(fit_reduce_2, function(x) x$df.residual)[-na]
}
df <- sum(df_H0) - sum(df_H1)
chi_stat <- 2 * (sum(llk_H1) - sum(llk_H0))
pvalue_2 <- pchisq(chi_stat, df = df, lower.tail = FALSE)
}else {pvalue_2 <- NA}
prev = TRUE
equiv = TRUE
group = sample_data(TaxNorm_Example_Input)$body_site
# fit reduced model
# test 1: existence of effect or not; by fitting intercept-only regression
if(prev){
fit_reduce_1 <- list()
for (i in 1:nrow(count)) {
zero <- sum(count[i,]==0)
if(zero >= 10){
if(is.null(group)){
fit_reduce_1[[i]] <- suppressWarnings(suppressWarnings(zinb.reg(formula = as.numeric(count[i,]) ~ 1 | 1 | 1,
control = zinb.control(trace=FALSE, EM=TRUE))))
}else{
fit_reduce_1[[i]] <- suppressWarnings(zinb.reg(formula = as.numeric(count[i,]) ~ 1 + group | 1 | 1,
control = zinb.control(trace=FALSE)))
}
}
if(zero < 10){
if(is.null(group)){
fit_reduce_1[[i]] <- suppressWarnings(suppressWarnings(nb.reg(formula = as.numeric(count[i,]) ~ 1 | 1,
control = zinb.control(trace=FALSE, EM=TRUE))))
}else{
fit_reduce_1[[i]] <- suppressWarnings(suppressWarnings(nb.reg(formula = as.numeric(count[i,]) ~ 1 + group | 1,
control = zinb.control(trace=FALSE, EM=TRUE))))
}
}
}
if (any(sapply(fit_reduce_1, inherits, "try-error")==TRUE)) {
fit_reduce_1 <- fit_reduce_1[-which(sapply(fit_reduce_1, inherits, "try-error")==TRUE)]
}
llk.null <- sapply(fit_reduce_1, function(x) x$loglik)
# lrt test
na <- unique(c(which(is.na(llk.full)), which(is.na(llk.null))))
if(length(na) == 0){
llk_H1 <- llk.full
llk_H0 <- llk.null
df_H1 <- res$df
df_H0 <- sapply(fit_reduce_1, function(x) x$df.residual)
}else{
llk_H1 <- llk.full[-na]
llk_H0 <- llk.null[-na]
df_H1 <- df_H1 <- res$df[-na]
df_H0 <- sapply(fit_reduce_1, function(x) x$df.residual)[-na]
}
df <- sum(df_H0) - sum(df_H1)
chi_stat <- 2 * (sum(llk_H1) - sum(llk_H0))
pvalue_1 <- pchisq(chi_stat, df = df, lower.tail = FALSE)
} else {pvalue_1 <- NA}
df_H1 <- final_df(res)
df_H1 <- df_H1 <- final_df(res)[-na]
# lrt test
na <- unique(c(which(is.na(llk.full)), which(is.na(llk.null))))
library(TaxNorm)
library(TaxNorm)
devtools::document()
devtools::document()
devtools::document()
getNamespaceExports("TaxaNorm")
getNamespaceExports("TaxNorm")
roxygen2::roxygenise()
devtools::document()
devtools::document()
library(TaxaNorm)
TaxaNorm_NMDS()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
data("TaxaNorm_Example_Output", package = "TaxaNorm")
TaxaNorm_Model_QC(TaxaNormResults = TaxaNorm_Example_Output)
TaxaNormResults = TaxaNorm_Example_Output
TaxaNormResults = TaxNorm_Example_Output
group_column = "body_site"
mynorm <- normdata(TaxaNormResults)
mydata <- input_data(TaxaNormResults)
normdata <- mynorm + abs(min(mynorm, na.rm = T))
dist <- vegan::vegdist(t(normdata), method="bray", na.rm = T)
fit <- vegan::metaMDS(dist, k=2)
View(normdata)
mynorm <- normdata(TaxaNormResults)
mydata <- input_data(TaxaNormResults)
View(mynorm)
normdata <- mynorm + abs(min(mynorm, na.rm = T))
mynorm[!is.finite(mynorm)] <- 0
typeof(mynorm)
mynorm <- sa.data.frame(normdata(TaxaNormResults))
mynorm <- as.data.frame(normdata(TaxaNormResults))
View(mynorm)
mynorm[!is.finite(mynorm)] <- 0
mynorm <- as.data.frame(normdata(TaxaNormResults))
mynorm[!is.finite(mynorm)] <- 0
mynorm <- as.numeric(normdata(TaxaNormResults))
mynorm <- normdata(TaxaNormResults)
mynorm[!is.finite(mynorm)] <- 0
a[!is.finite(a)] <- 0
mynorm[!is.finite(mynorm)] <- 0
mynorm
mynorm <- data.frame(normdata(TaxaNormResults))
typeof(mynorm)
mynorm <- as.data.frame(do.call(cbind, mynorm))
typeof
typeof(mynorm)
mynorm[!is.finite(mynorm)] <- 0
mynorm <- normdata(TaxaNormResults)
View(mynorm)
mynorm <- normdata(TaxaNormResults)
df <- do.call(rbind.data.frame,mynorm)
df[!is.finite(df)] <- 0
df <- data.frame(matrix(unlist(mynorm), nrow=length(mynorm), byrow=TRUE))
View(df)
df[!is.finite(df)] <- 0
typeof(df)
df <- unlist(mynorm)
df[["HMP_2012.metaphlan_bugs_list.nasalcavity:SRS0111051"]]
#take the lowest non inf number, replace -inf with lowest value
normdata <- mynorm + abs(min(mynorm, na.rm = T))
View(normdata)
#take the lowest non inf number, replace -inf with lowest value
#normdata <- mynorm + abs(min(mynorm, na.rm = T))
normdata <- mynorm + abs(min(mynorm[is.finite(mynorm)],,na.rm= T))
#take the lowest non inf number, replace -inf with lowest value
#normdata <- mynorm + abs(min(mynorm, na.rm = T))
normdata <- mynorm + abs(min(mynorm[is.finite(mynorm)],na.rm= T))
normdata <- mynorm + abs(min(mynorm, na.rm = T))
#take the lowest non inf number, replace -inf with lowest value
#normdata <- mynorm + abs(min(mynorm, na.rm = T))
normdata <- mynorm + abs(min(mynorm[is.finite(mynorm)],na.rm= T))
mynorm[sapply(mynorm, is.infinite)] <- NA
View(mynorm)
mynorm<- mynorm %>% mutate_if(is.numeric, ~replace(., is.na(.), min(., na.rm = TRUE)/2))
cols <- sapply(mynorm, is.numeric)
mynorm[cols] <- lapply(mynorm[cols], function(x)
replace(x, is.na(x), min(x, na.rm = TRUE)/2))
View(mynorm)
mynorm[cols] <- lapply(mynorm[cols], function(x)
replace(x, is.na(x), min(x, na.rm = TRUE)))
View(mynorm)
mynorm <- normdata(TaxaNormResults)
mynorm[sapply(mynorm, is.infinite)] <- NA
cols <- sapply(mynorm, is.numeric)
mynorm[cols] <- lapply(mynorm[cols], function(x)
replace(x, is.na(x), min(x, na.rm = TRUE)))
mydata <- input_data(TaxaNormResults)
#take the lowest non inf number, replace -inf with lowest value
normdata <- mynorm + abs(min(mynorm, na.rm = T))
View(normdata)
dist <- vegan::vegdist(t(normdata), method="bray", na.rm = T)
fit <- vegan::metaMDS(dist, k=2)
norm_NMDS <- data.frame(fit$points, sample_data(mydata))
p <- ggplot(norm_NMDS) +
geom_point(aes_string('MDS1', 'MDS2', color = group_column)) +
stat_ellipse(aes_string('MDS1', 'MDS2', color = group_column)) +
theme_classic()
p
library(TaxaNorm)
load("C:/Users/Dillon/OneDrive/Documents/GitHub/TaxaNorm/data/TaxaNorm_Example_Input.rda")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
TaxaNorm_Example_Input <- TaxNorm_Example_Input
save(TaxaNorm_Example_Input, file = "../data/TaxaNorm_Example_Input.rda")
load("C:/Users/Dillon/OneDrive/Documents/GitHub/TaxaNorm/data/TaxaNorm_Example_Output.rda")
# run normalization
TaxaNorm_Example_Output <- TaxaNorm_Normalization(data= TaxaNorm_Example_Input,
depth = NULL,
group = sample_data(TaxaNorm_Example_Input)$body_site,
meta.data = NULL,
filter.cell.num = 10,
filter.taxa.count = 0,
random = FALSE,
ncores = NULL)
save(TaxaNorm_Example_Output, file = "../data/TaxaNorm_Example_Output.rda")
load("C:/Users/Dillon/OneDrive/Documents/GitHub/TaxaNorm/data/TaxaNorm_Example_Input.rda")
load("C:/Users/Dillon/OneDrive/Documents/GitHub/TaxaNorm/data/TaxaNorm_Example_Output.rda")
load("C:/Users/Dillon/OneDrive/Documents/GitHub/TaxaNorm/data/TaxaNorm_Example_Input.rda")
?save
save(TaxaNorm_Example_Output, file = "../data/TaxaNorm_Example_Output.rda",compress = "xz")
save(TaxaNorm_Example_Input, file = "../data/TaxaNorm_Example_Input.rda",compress = "xz")
library(TaxaNorm)
if (!require(remotes)) install.packages("remotes")
remotes::install_github("wangziyue57/TaxaNorm",
dependencies = TRUE,
build_vignettes = TRUE)
library(TaxaNorm)
devtools::check()
use_release_issue()
??use_release_issue()
install.packages("usethis")
usethis::use_release_issue()
usethis::use_news_md()
usethis::use_news_md()
usethis::use_news_md()
usethis::use_cran_comments()
Authors@R:
Authors
??noSuggests
git pull
usethis::use_github_links()
urlchecker::url_check()
devtools::check(remote = TRUE, manual = TRUE)
rcmd(Rd2pdf TaxaNorm)
rcmd(Rd2pdf, TaxaNorm)
R CMD Rd2pdf TaxaNorm
devtools::check(remote = TRUE, manual = TRUE)
devtools::check(remote = TRUE, manual = TRUE)
devtools::check_rhub()
setRepositories(ind=1:2)
devtools::check_win_devel()
usethis::use_version('major')
usethis::use_version('major')
devtools::submit_cran()
usethis::edit_r_buildignore()
usethis::use_build_ignore(c("hexSticker.png"))
> usethis::use_build_ignore(c("TaxaNorm.Rproj"))
usethis::use_build_ignore(c("TaxaNorm.Rproj"))
devtools::check_win_devel()
usethis::use_version('major')
usethis::use_version('major')
devtools::submit_cran()
library(TaxaNorm)
devtools::document()
pkgload::dev_help('TaxaNormGenerics')
devtools::document()
load("C:/Users/Dillon/OneDrive/Documents/GitHub/TaxaNorm/data/TaxaNorm_Example_Input.rda")
View(TaxaNorm_Example_Input)
coefficients <-  matrix(c(1,2,3,4,5,6,7,8,9),nrow=3,ncol=3,byrow=TRUE)
mu <- matrix(c(1,2,3,4,5,6,7,8,9),nrow=3,ncol=3,byrow=TRUE)
theta <-  matrix(c(1,2,3,4,5,6,7,8,9),nrow=3,ncol=3,byrow=TRUE)
pi <- matrix(c(1,2,3,4,5,6,7,8,9),nrow=3,ncol=3,byrow=TRUE)
TaxaNorm_Model_Parameters(coefficients = coefficients,mu = mu,theta = theta,pi = pi)
scale(c(1,2,3,4,5,6,7,8,9))
coefficients <-  matrix(c(1,2,3,4,5,6,7,8,9),nrow=3,ncol=3,byrow=TRUE)
mu <- matrix(c(1,2,3,4,5,6,7,8,9),nrow=3,ncol=3,byrow=TRUE)
theta <-  matrix(c(1,2,3,4,5,6,7,8,9),nrow=3,ncol=3,byrow=TRUE)
pi <- matrix(c(1,2,3,4,5,6,7,8,9),nrow=3,ncol=3,byrow=TRUE)
model_pars <- TaxaNorm_Model_Parameters(coefficients = coefficients,mu = mu,theta = theta,pi = pi)
data("TaxaNorm_Example_Input", package = "TaxaNorm")
rawdata <- data.frame(Taxa1 = c(1,2,3),Taxa2 = c(3,4,5),Taxa3 = c(6,7,8))
normdata <- data.frame(Taxa1 = c(-1.4,-1.09,-0.73), Taxa2 = c( -0.36,0,0.36), Taxa3 = c(0.73,1.09,1.46))
ecdf <- data.frame(0.05,0.23,0.89)
converge <- c(TRUE,TRUE,TRUE)
converge <- c(TRUE,TRUE,FALSE)
llk <- c(1,1.5,0.5)
final_df <- data.frame(Taxa1 = c(1,2,3),Taxa2 = c(3,4,5),Taxa3 = c(6,7,8))
TaxaNormResults(input_data = TaxaNorm_Example_Input,
rawdata = rawdata,
normdata = normdata,
ecdf = ecdf,
model_pars = model_pars,
converge = converge,
llk = llk,
final_df = final_df)
TaxaNormResults(input_data = TaxaNorm_Example_Input,
rawdata = rawdata,
normdata = normdata,
ecdf = ecdf,
model_pars = model_pars,
converge = converge,
llk = llk,
final_df = final_df)
TaxaNorm_Results(input_data = TaxaNorm_Example_Input,
rawdata = rawdata,
normdata = normdata,
ecdf = ecdf,
model_pars = model_pars,
converge = converge,
llk = llk,
final_df = final_df)
?cat
library(TaxaNorm)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(TaxaNorm)
# library(phyloseq)
# library(microbiome)
# library(ggplot2)
# library(vegan)
# library(MASS)
data("TaxaNorm_Example_Input", package = "TaxaNorm")
# run normalization
TaxaNorm_Example_Output <- TaxaNorm_Normalization(data= TaxaNorm_Example_Input,
depth = NULL,
group = sample_data(TaxaNorm_Example_Input)$body_site,
meta.data = NULL,
filter.cell.num = 10,
filter.taxa.count = 0,
random = FALSE,
ncores = 1)
data("TaxaNorm_Example_Input", package = "TaxaNorm")
# run normalization
TaxaNorm_Example_Output <- TaxaNorm_Normalization(data= TaxaNorm_Example_Input,
depth = NULL,
group = sample_data(TaxaNorm_Example_Input)$body_site,
meta.data = NULL,
filter.cell.num = 10,
filter.taxa.count = 0,
random = FALSE,
ncores = NULL)
# run diagnosis test
Diagnose_Data <- TaxaNorm_Run_Diagnose(Normalized_Results = TaxaNorm_Example_Output, prev = TRUE, equiv = TRUE, group = sample_data(TaxaNorm_Example_Input)$body_site)
usethis::use_github_links()
urlchecker::url_check()
?use_version
usethis::use_version("minor")
usethis::use_version("minor")
devtools::submit_cran()
