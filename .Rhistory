knitr::opts_chunk$set(echo = TRUE)
library(TaxNorm)
library(phyloseq)
library(microbiome)
data("TaxNorm_Example_Output", package = "TaxNorm")
data("TaxNorm_Example_Input", package = "TaxNorm")
View(TaxNorm_Example_Output)
View(TaxNorm_Example_Output)
rawdata(TaxNorm_Example_Output)
View(TaxNorm_Example_Output)
install.packages("vegan")
install.packages("vegan")
install.packages("vegan")
install.packages("vegan")
library(TaxNorm)
library(TaxNorm)
normdata(TaxNorm_Example_Output)
library(TaxNorm)
normdata
normdata()
rawdata()
library(TaxNorm)
library(TaxNorm)
library(TaxNorm)
library(TaxNorm)
pi()
library(TaxNorm)
pi()
knitr::opts_chunk$set(echo = TRUE)
library(TaxNorm)
library(phyloseq)
library(microbiome)
data("TaxNorm_Example_Output", package = "TaxNorm")
mymodelpars <- model_pars(TaxNorm_Example_Output)
mycoefs <- coefficients(mymodelpars)
hist(mycoefs[,2])
View(TaxNorm_Example_Output)
View(TaxNorm_Example_Output@rawdata)
data("TaxNorm_Example_Input", package = "TaxNorm")
library(TaxNorm)
input_data()
library(TaxNorm)
knitr::opts_chunk$set(echo = TRUE)
library(TaxNorm)
library(phyloseq)
library(microbiome)
data("TaxNorm_Example_Input", package = "TaxNorm")
group <- sample_data(TaxNorm_Example_Input)$body_site
HMP_norm <- TaxNorm_Normalization(data = TaxNorm_Example_Input,
depth = NULL,
group = group,
filter.sample.num = 1,
filter.taxa.count = 0,
random = TRUE,
ncores = 1)
TaxNorm_Results()
library(TaxNorm)
library(TaxNorm)
TaxNorm_Results()
knitr::opts_chunk$set(echo = TRUE)
library(TaxNorm)
library(phyloseq)
library(microbiome)
group <- sample_data(TaxNorm_Example_Input)$body_site
HMP_norm <- TaxNorm_Normalization(data = TaxNorm_Example_Input,
depth = NULL,
group = group,
filter.sample.num = 1,
filter.taxa.count = 0,
random = TRUE,
ncores = 1)
TaxNorm_Results()
library(TaxNorm)
knitr::opts_chunk$set(echo = TRUE)
library(TaxNorm)
library(phyloseq)
library(microbiome)
group <- sample_data(TaxNorm_Example_Input)$body_site
HMP_norm <- TaxNorm_Normalization(data = TaxNorm_Example_Input,
depth = NULL,
group = group,
filter.sample.num = 1,
filter.taxa.count = 0,
random = TRUE,
ncores = 1)
str(TaxNorm_Example_Input)
library(TaxNorm)
knitr::opts_chunk$set(echo = TRUE)
library(TaxNorm)
library(phyloseq)
library(microbiome)
HMP_norm <- TaxNorm_Normalization(data = TaxNorm_Example_Input,
depth = NULL,
group = group,
filter.sample.num = 1,
filter.taxa.count = 0,
random = TRUE,
ncores = 1)
library(TaxNorm)
TaxNorm_Results()
knitr::opts_chunk$set(echo = TRUE)
library(TaxNorm)
library(phyloseq)
library(microbiome)
HMP_norm <- TaxNorm_Normalization(data = TaxNorm_Example_Input,
depth = NULL,
group = group,
filter.sample.num = 1,
filter.taxa.count = 0,
random = TRUE,
ncores = 1)
View(TaxNorm_Example_Input)
library(TaxNorm)
knitr::opts_chunk$set(echo = TRUE)
library(TaxNorm)
library(phyloseq)
library(microbiome)
group <- sample_data(TaxNorm_Example_Input)$body_site
HMP_norm <- TaxNorm_Normalization(data = TaxNorm_Example_Input,
depth = NULL,
group = group,
filter.sample.num = 1,
filter.taxa.count = 0,
random = TRUE,
ncores = 1)
View(HMP_norm)
TaxNorm_Example_Output <- HMP_norm
save(TaxNorm_Example_Output, file = "C:\\Users\\Dillon\\OneDrive\\Documents\\GitHub\\TaxNorm\\data/TaxNorm_Example_Output.rda")
data("TaxNorm_Example_Output", package = "TaxNorm")
View(TaxNorm_Example_Output)
library(TaxNorm)
knitr::opts_chunk$set(echo = TRUE)
library(TaxNorm)
library(phyloseq)
library(microbiome)
data("TaxNorm_Example_Output", package = "TaxNorm")
View(TaxNorm_Example_Output)
TaxNorm_results <- TaxNorm_Example_Output
mymodelpars <- model_pars(TaxNorm_Results)
TaxNormResults <- TaxNorm_Example_Output
mymodelpars <- model_pars(TaxNormResults)
mycoefs <- coefficients(mymodelpars)
myinput_data <- input_data(TaxNormResults)
mymodelpars <- model_pars(TaxNormResults)
mycoefs <- coefficients(mymodelpars)
myinput_data <- input_data(TaxNormResults)
hist(mycoefs[,2])
table(tax_table(myinput_data)[, "Phylum"], exclude = NULL)
mytab <- table(tax_table(myinput_data)[, "Phylum"], exclude = NULL)
length(mytab)
1:length(mytab)-1
length(mytab)
1:(length(mytab)-1)
mytab
mytab[1]
names(mytab)
myphy <- names(mytab)[-length(mytab)]
myphy
coef_depth <- list()
for(i in 1:(length(mytab)-1)){
coef_depth[[i]] <- coef[taxa_names(subset_taxa(myinput_data, Phylum==myphy[i])),2]
}
coef[taxa_names(subset_taxa(myinput_data, Phylum==myphy[i])),2]
myphy[i]
coef_depth[[i]] <- mycoefs[taxa_names(subset_taxa(myinput_data, Phylum==myphy[i])),2]
View(coef_depth)
coef_depth <- list()
for(i in 1:(length(mytab)-1)){
coef_depth[[i]] <- mycoefs[taxa_names(subset_taxa(myinput_data, Phylum==myphy[i])),2]
}
View(coef_depth)
names(coef_depth) <- myphy
View(coef_depth)
dens <- lapply(coef_depth, density)
plot(NA, xlim=range(sapply(dens, "[", "x")), ylim=range(sapply(dens, "[", "y")),
xlab = "Slope for sequencing depth", ylab="Density")
mapply(lines, dens, col=1:length(dens))
legend("topleft", legend=names(dens), fill=1:length(dens))
View(dens)
plot(NA, xlim=range(sapply(dens, "[", "x")), ylim=range(sapply(dens, "[", "y")),
xlab = "Slope for sequencing depth", ylab="Density")
mapply(lines, dens, col=1:length(dens))
legend("topleft", legend=names(dens), fill=1:length(dens))
View(dens)
dens[["Bacteroidetes"]]
View(coef_depth)
coef_depth[["Bacteroidetes"]]
dens[["Bacteroidetes"]]
coef_depth[[2]]
str(coef_depth[[2]])
dens
as.data.frame(coef_depth[[2]])
mydata <- bind_cols(coef_depth)
mydata <- cbind(coef_depth)
View(mydata)
mydata <- coef_depth[[2]]
mydata <- as.data.frame(mydata)
View(mydata)
ggplot(mydata, aes(x=mydata)) +
geom_density()
?density
i=1
plotdata <- data.frame()
curr_data <- coef_depth[i]
curr_data <- as.data.frame(curr_data)
View(curr_data)
View(coef_depth)
plotdata <- cbind(plotdata,curr_data)
plotdata <- merge(plotdata,curr_data)
View(plotdata)
curr_data <- coef_depth[i]
curr_data <- as.data.frame(curr_data)
plotdata <- merge(plotdata,curr_data)
library(tidyverse)
plotdata <- bind_cols(plotdata,curr_data)
plotdata <- data.frame()
curr_data <- coef_depth[i]
curr_data <- as.data.frame(curr_data)
plotdata <- bind_cols(plotdata,curr_data)
View(curr_data)
coef_depth[["Actinobacteria"]]
coef_depth[["Firmicutes"]]
my_bind <- function(x, y){
if(length(x = x) > length(x = y)){
len_diff <- length(x) - length(y)
y <- c(y, rep(NA, len_diff))
}else if(length(x = x) < length(x = y)){
len_diff <- length(y) - length(x)
x <- c(x, rep(NA, len_diff))
}
cbind(x, y)
}
plotdata <- my_bind(plotdata,curr_data)
View(plotdata)
plotdata <- data.frame()
for(i in seq_along(coef_depth)){
curr_data <- coef_depth[i]
curr_data <- as.data.frame(curr_data)
plotdata <- my_bind(plotdata,curr_data)
}
i=1
curr_data <- coef_depth[i]
curr_data <- as.data.frame(curr_data)
plotdata <- my_bind(plotdata,curr_data)
View(plotdata)
plotdata <- data.frame()
View(plotdata)
curr_data <- coef_depth[i]
curr_data <- as.data.frame(curr_data)
plotdata <- my_bind(plotdata,curr_data)
View(plotdata)
i=2
curr_data <- coef_depth[i]
curr_data <- as.data.frame(curr_data)
plotdata <- my_bind(plotdata,curr_data)
View(dens)
dens[["Firmicutes"]]
curr_data <- as.data.frame(curr_data)
curr_data <- coef_depth[i]
curr_data <- as.data.frame(curr_data,"Phy" = myphy[i])
View(curr_data)
curr_data <- coef_depth[i]
curr_data <- as.data.frame(curr_data,"Phy" = myphy[i])
View(curr_data)
curr_data <- coef_depth[i]
curr_data <- as.data.frame(curr_data)
curr_data$Phy <- myphy[i]
View(curr_data)
plotdata <- rbind(plotdata,curr_data)
names(curr_data) <- c("Value","Phy")
plotdata <- rbind(plotdata,curr_data)
plotdata <- data.frame("Value","Phy")
View(plotdata)
plotdata <- data.frame("Value" = NA,"Phy" = NA)
View(plotdata)
plotdata <- data.frame(ncol = 2)
View(plotdata)
plotdata <- data.frame(matrix(ncol = 2,nrow = 0))
View(plotdata)
names(plotdata) <- c("Value","Phy")
curr_data <- coef_depth[i]
curr_data <- as.data.frame(curr_data)
curr_data$Phy <- myphy[i]
names(curr_data) <- c("Value","Phy")
plotdata <- rbind(plotdata,curr_data)
View(plotdata)
plotdata <- data.frame(matrix(ncol = 2,nrow = 0))
names(plotdata) <- c("Value","Phy")
for(i in seq_along(coef_depth)){
curr_data <- coef_depth[i]
curr_data <- as.data.frame(curr_data)
curr_data$Phy <- myphy[i]
names(curr_data) <- c("Value","Phy")
plotdata <- rbind(plotdata,curr_data)
}
View(plotdata)
ggplot(plotdata, aes(x=Value, color=Phy)) +
geom_density()
ggplot(plotdata, aes(x=Value, color=Phy)) +
geom_density()
dens <- lapply(coef_depth, density)
plot(NA, xlim=range(sapply(dens, "[", "x")), ylim=range(sapply(dens, "[", "y")),
xlab = "Slope for sequencing depth", ylab="Density")
mapply(lines, dens, col=1:length(dens))
legend("topleft", legend=names(dens), fill=1:length(dens))
ggplot(plotdata, aes(x=Value, color=Phy)) +
geom_density() +
theme_classic()
ggplot(plotdata, aes(x=Value, color=Phy)) +
geom_density() +
scale_color_brewer(palette = "Dark2") +
theme_classic()
ggplot(plotdata, aes(x=Value, color=Phylum)) +
geom_density() +
scale_color_brewer(palette = "Dark2") +
labs(x = "Slope for Sequencing Depth") +
theme_classic()
plotdata <- data.frame(matrix(ncol = 2,nrow = 0))
names(plotdata) <- c("Phylum","Phy")
for(i in seq_along(coef_depth)){
curr_data <- coef_depth[i]
curr_data <- as.data.frame(curr_data)
curr_data$Phy <- myphy[i]
names(curr_data) <- c("Value","Phylum")
plotdata <- rbind(plotdata,curr_data)
}
ggplot(plotdata, aes(x=Value, color=Phylum)) +
geom_density() +
scale_color_brewer(palette = "Dark2") +
labs(x = "Slope for Sequencing Depth") +
theme_classic()
mean_coef_plot <- ggplot(plotdata, aes(x=Value, color=Phylum)) +
geom_density() +
scale_color_brewer(palette = "Dark2") +
labs(x = "Slope for Sequencing Depth") +
theme_classic()
coef_zero <- list()
for(i in 1:(length(mytab)-1)){
coef_zero[[i]] <- mycoefs[taxa_names(subset_taxa(myinput_data, Phylum==myphy[i])),8]
}
names(coef_zero) <- myphy
View(coef_zero)
dens <- lapply(coef_zero, density)
plot(NA, xlim=range(sapply(dens, "[", "x")), ylim=range(sapply(dens, "[", "y")),
xlab = "Slope for sequencing depth", ylab="Density")
mapply(lines, dens, col=1:length(dens))
legend("topleft", legend=names(dens), fill=1:length(dens))
plotdata <- data.frame(matrix(ncol = 2,nrow = 0))
names(plotdata) <- c("Phylum","Phy")
for(i in seq_along(coef_depth)){
curr_data <- coef_depth[i]
curr_data <- as.data.frame(curr_data)
curr_data$Phy <- myphy[i]
names(curr_data) <- c("Value","Phylum")
plotdata <- rbind(plotdata,curr_data)
}
ggplot(plotdata, aes(x=Value, color=Phylum)) +
geom_density() +
scale_color_brewer(palette = "Dark2") +
labs(x = "Slope for Sequencing Depth") +
theme_classic()
plotdata <- data.frame(matrix(ncol = 2,nrow = 0))
names(plotdata) <- c("Phylum","Phy")
for(i in seq_along(coef_zero)){
curr_data <- coef_zero[i]
curr_data <- as.data.frame(curr_data)
curr_data$Phy <- myphy[i]
names(curr_data) <- c("Value","Phylum")
plotdata <- rbind(plotdata,curr_data)
}
ggplot(plotdata, aes(x=Value, color=Phylum)) +
geom_density() +
scale_color_brewer(palette = "Dark2") +
labs(x = "Slope for Sequencing Depth") +
theme_classic()
ggplot(plotdata, aes(x=Value, color=Phylum)) +
geom_density() +
scale_color_brewer(palette = "Dark2") +
labs(x = "Slope for Sequencing Depth") +
theme_classic()
dens <- lapply(coef_zero, density)
plot(NA, xlim=range(sapply(dens, "[", "x")), ylim=range(sapply(dens, "[", "y")),
xlab = "Slope for sequencing depth", ylab="Density")
mapply(lines, dens, col=1:length(dens))
legend("topleft", legend=names(dens), fill=1:length(dens))
zero_coef_plot <- ggplot(plotdata, aes(x=Value, color=Phylum)) +
geom_density() +
scale_color_brewer(palette = "Dark2") +
labs(x = "Slope for Sequencing Depth") +
theme_classic()
coef_disb <- list()
for(i in 1:(length(mytab)-1)){
coef_disb[[i]] <- mycoefs[taxa_names(subset_taxa(myinput_data, Phylum==myphy[i])),10]
}
names(coef_disb) <- myphy
plotdata <- data.frame(matrix(ncol = 2,nrow = 0))
names(plotdata) <- c("Phylum","Phy")
for(i in seq_along(coef_disb)){
curr_data <- coef_disb[i]
curr_data <- as.data.frame(curr_data)
curr_data$Phy <- myphy[i]
names(curr_data) <- c("Value","Phylum")
plotdata <- rbind(plotdata,curr_data)
}
ggplot(plotdata, aes(x=Value, color=Phylum)) +
geom_density() +
scale_color_brewer(palette = "Dark2") +
labs(x = "Slope for Sequencing Depth") +
theme_classic()
dens <- lapply(coef_disb, density)
plot(NA, xlim=range(sapply(dens, "[", "x")), ylim=range(sapply(dens, "[", "y")),
xlab = "Slope for sequencing depth", ylab="Density")
mapply(lines, dens, col=1:length(dens))
legend("topleft", legend=names(dens), fill=1:length(dens))
data("TaxNorm_Example_Input", package = "TaxNorm")
data("TaxNorm_Example_Output", package = "TaxNorm")
View(TaxNorm_Example_Output)
TaxNormResults <- TaxNorm_Example_Output
mynorm <- normdata(TaxNormResults)
View(mynorm)
normdata = mynorm + abs(min(mynorm, na.rm = T))
library(vegan)
mynorm <- normdata(TaxNormResults)
normdata <- mynorm + abs(min(mynorm, na.rm = T))
dist <- vegan::vegdist(t(normdata), method="bray", na.rm = T)
fit <- vegan::metaMDS(dist, k=2)
norm_NMDS = data.frame(fit$points, sample_data(data))
ggplot(norm_NMDS, aes(x=MDS1, y=MDS2)) +
geom_point(aes(MDS1, MDS2, colour = body_site)) +
stat_ellipse(aes(MDS1, MDS2, colour = body_site)) +
theme_bw()
norm_NMDS <- data.frame(fit$points, sample_data(data))
mydata <- input_data(TaxNormResults)
norm_NMDS <- data.frame(fit$points, sample_data(mydata))
ggplot(norm_NMDS, aes(x=MDS1, y=MDS2)) +
geom_point(aes(MDS1, MDS2, colour = body_site)) +
stat_ellipse(aes(MDS1, MDS2, colour = body_site)) +
theme_bw()
ggplot(norm_NMDS, aes(x=MDS1, y=MDS2)) +
geom_point(aes(MDS1, MDS2, colour = body_site)) +
stat_ellipse(aes(MDS1, MDS2, colour = body_site)) +
theme_classic()
View(norm_NMDS)
group = "body_site"
ggplot(norm_NMDS, aes(x=MDS1, y=MDS2)) +
geom_point(aes(MDS1, MDS2, color = group)) +
stat_ellipse(aes(MDS1, MDS2, color = group)) +
theme_classic()
ggplot(norm_NMDS, aes(x=MDS1, y=MDS2)) +
geom_point(aes_(MDS1, MDS2, color = group)) +
stat_ellipse(aes_(MDS1, MDS2, color = group)) +
theme_classic()
ggplot(norm_NMDS, aes(x=MDS1, y=MDS2)) +
geom_point(aes_('MDS1', 'MDS2', color = group)) +
stat_ellipse(aes_('MDS1', 'MDS2', color = group)) +
theme_classic()
ggplot(norm_NMDS, aes_(x='MDS1', y='MDS2')) +
geom_point(aes_('MDS1', 'MDS2', color = group)) +
stat_ellipse(aes_('MDS1', 'MDS2', color = group)) +
theme_classic()
ggplot(norm_NMDS) +
geom_point(aes_('MDS1', 'MDS2', color = group)) +
stat_ellipse(aes_('MDS1', 'MDS2', color = group)) +
theme_classic()
ggplot(norm_NMDS) +
geom_point(aes_('MDS1', 'MDS2', color = body_site)) +
stat_ellipse(aes_('MDS1', 'MDS2', color = body_site)) +
theme_classic()
ggplot(norm_NMDS) +
geom_point(aes_('MDS1', 'MDS2', color = 'body_site')) +
stat_ellipse(aes_('MDS1', 'MDS2', color = 'body_site')) +
theme_classic()
ggplot(norm_NMDS) +
geom_point(aes_(MDS1, MDS2, color = body_site)) +
stat_ellipse(aes_(MDS1, MDS2, color = body_site)) +
theme_classic()
ggplot(norm_NMDS) +
geom_point(aes(MDS1, MDS2, color = body_site)) +
stat_ellipse(aes(MDS1, MDS2, color = body_site)) +
theme_classic()
ggplot(norm_NMDS) +
geom_point(aes_string('MDS1', 'MDS2', color = group)) +
stat_ellipse(aes_string('MDS1', 'MDS2', color = group)) +
theme_classic()
data = TaxNorm_Example_Input
depth = sample_sums(data)
hist(depth)
plot(log(depth+1), log(countdata[4,]+1))
depth = sample_sums(data)
countdata = abundances(data)
mean_all = rowMeans(countdata)
zero_all = rowSums(otu_table(data)==0)
var_all = matrixStats::rowVars(countdata) # taxa varaince
data_summary = data.frame(mean = mean_all, var = var_all, zero = zero_all)
# inspect mean-variance relationship
# fit a local regression line (loess)
# parameter: span=1 can be changed. larger value will give less overfitted line
ggplot(data_summary, aes(mean, var)) +
geom_point() +
geom_smooth(method = "loess", span = 1, method.args = list(degree=2), color = "red") +
scale_x_continuous(trans = 'log10') +
scale_y_continuous(trans = 'log10') +
geom_abline(intercept = 0, slope = 1, linetype = 1, size = 0.5,
color = "gray60")
# inspect mean-zero relationship
ggplot(data_summary, aes(mean, zero)) +
geom_point() +
geom_smooth(method = "loess", span = 1, method.args = list(degree=1), color = "red") +
scale_x_continuous(trans = 'log10') +
scale_y_continuous(trans = 'log10') +
geom_abline(intercept = 0, slope = 1, linetype = 1, size = 0.5,
color = "gray60")
