if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("phyloseq")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("microbiome")
library(TaxNorm)
TaxNorm::run_norm()
?run_norm
library(TaxNorm)
library(TaxNorm)
library(TaxNorm)
library(TaxNorm)
check(...., args = c("--no-examples", "--no-tests"))
library(TaxNorm)
library(TaxNorm)
knitr::opts_chunk$set(echo = TRUE)
library(TaxNorm)
data("TaxNorm_Example_Input", package = "TaxNorm")
group <- sample_data(TaxNorm_Example_Input)$body_site
HMP_norm <- TaxNorm_GetCounts(data = data,
depth = NULL,
group = group,
filter.sample.num = 1,
filter.taxa.count = 0,
random = TRUE,
ncores = 1)
HMP_norm <- TaxNorm_GetCounts(data = TaxNorm_Example_Input,
depth = NULL,
group = group,
filter.sample.num = 1,
filter.taxa.count = 0,
random = TRUE,
ncores = 1)
knitr::opts_chunk$set(echo = TRUE)
library(TaxNorm)
library(phyloseq)
library(microbiome)
group <- sample_data(TaxNorm_Example_Input)$body_site
HMP_norm <- TaxNorm_GetCounts(data = TaxNorm_Example_Input,
depth = NULL,
group = group,
filter.sample.num = 1,
filter.taxa.count = 0,
random = TRUE,
ncores = 1)
View(HMP_norm)
View(HMP_norm)
View(HMP_norm)
View(HMP_norm)
str(HMP_norm$converge)
library(TaxNorm)
knitr::opts_chunk$set(echo = TRUE)
library(TaxNorm)
data("TaxNorm_Example_Input",package = "TaxNorm")
TaxNorm_Model_Parameters(coefficients = c(10,10,10,10),
mu = 10,
theta = 10,
pi = 10)
?new2
install.packages("s4vectors")
TaxNorm_Model_Parameters(coefficients = c(10,10,10,10),
mu = 10,
theta = 10,
pi = 10)
library(TaxNorm)
TaxNorm_Model_Parameters(coefficients = c(10,10,10,10),
mu = 10,
theta = 10,
pi = 10)
knitr::opts_chunk$set(echo = TRUE)
library(TaxNorm)
TaxNorm_Model_Parameters(coefficients = c(10,10,10,10),
mu = 10,
theta = 10,
pi = 10)
TaxNorm_Model_Parameters(coefficients = c(10,10,10,10),
mu = 10,
theta = 10,
pi = 10)
library(S4Vectors)
TaxNorm_Model_Parameters(coefficients = c(10,10,10,10),
mu = 10,
theta = 10,
pi = 10)
library(TaxNorm)
library(TaxNorm)
library(TaxNorm)
knitr::opts_chunk$set(echo = TRUE)
library(TaxNorm)
library(phyloseq)
library(microbiome)
TaxNorm_Model_Parameters(coefficients = c(10),
mu = c(10),
theta = c(10),
pi = c(10))
library(TaxNorm)
TaxNorm_Model_Parameters(coefficients = c(10),
mu = c(10),
theta = c(10),
pi = c(10))
knitr::opts_chunk$set(echo = TRUE)
library(TaxNorm)
library(phyloseq)
library(microbiome)
TaxNorm_Model_Parameters(coefficients = 10,
mu = 10,
theta = 10,
pi = 10)
coeff <- c(10,10)
mus <- c(10,10)
thetas <- c(10,10)
pis <- c(10,10)
TaxNorm_Model_Parameters(coefficients = coeff,
mu = mus,
theta = thetas,
pi = pis)
model_params <- TaxNorm_Model_Parameters(coefficients = coeff,
mu = mus,
theta = thetas,
pi = pis)
group <- sample_data(TaxNorm_Example_Input)$body_site
data("TaxNorm_Example_Input", package = "TaxNorm")
TaxNorm_Results(rawdata = mtcars,
normdata = mtcars,
ecdf = mtcars,
model_pars = model_params,
converge = TRUE)
coeff <- c(10,10)
mus <- c(10,10)
thetas <- c(10,10)
pis <- c(10,10)
model_params <- TaxNorm_Model_Parameters(coefficients = coeff,
mu = mus,
theta = thetas,
pi = pis)
res <- TaxNorm_Results(rawdata = mtcars,
normdata = mtcars,
ecdf = mtcars,
model_pars = model_params,
converge = TRUE)
View(res)
res <- TaxNorm_Results(rawdata = mtcars,
normdata = mtcars,
ecdf = mtcars,
model_pars = model_params,
converge = c(TRUE,TRUE,FALSE))
View(res)
data = TaxNorm_Example_Input
depth = NULL
group = group
group <- sample_data(TaxNorm_Example_Input)$body_site
group = group
filter.sample.num = 1
filter.taxa.count = 0
random = TRUE
ncores = 1
if (!(methods::is(data, "phyloseq")) & !(is.matrix(data))) {
stop("Input data must be either a phyloseq object or a count matrix.")}
if (is.matrix(data)) {
if (is.null(rownames(data) | is.null(colnames(data)))) {
stop("Must supply taxa/sample names.")}
}
if(methods::is(data, "phyloseq")) {
count <- abundances(data)
}else {
count <- data
}
if(!is.null(group)) {
if(!is.factor(group)) group=as.factor(group)
if(length(group) != ncol(count)) stop("The number of conditions is not the same as the number of samples. ")
}
## filter rare taxa; default is keep taxa appear in at least 10 samples within each group
if(!is.null(group)) {
taxaIn <- lapply(levels(as.factor(group)), function(i) {
which(apply(count[, which(group == i)], 1, function(x) sum(x > filter.taxa.count) > filter.sample.num))})
taxaIn <- Reduce(intersect, taxaIn)
}else {
taxaIn <- apply(count, 1, function(x) sum(x > filter.taxa.count) > filter.sample.num)
}
count_toUse <- count[taxaIn,]
message(paste0("Removing ", (nrow(count) - nrow(count_toUse)), " rare taxa... \n" ))
## run normalization algorithm
# fit zero-inflated negative binomial regression for each taxa, get the estimated parameters
message(paste0("Fitting models... \n" ))
if(is.null(depth)){
depth_toUse <- colSums(count_toUse)
}else depth_toUse <- depth
if (is.null(ncores)) {ncores <- max(1, parallel::detectCores() - 1)}
if(ncores == 1){
model_pars_list <- apply(count_toUse, 1, fit_zinb, depth = depth_toUse, covar = group)
}else{
message(paste0("Setting up parallel computation using ", ncores, " cores... \n" ))
if (.Platform$OS.type == "windows" | parallelly::supportsMulticore() == FALSE) {
future::plan(future::multisession, workers=ncores)}
else {
future::plan(future::multicore, workers=ncores)}
model_pars_list <- future.apply::future_apply(count_toUse, 1, fit_zinb, depth = depth_toUse, covar = group,
future.seed = FALSE)
}
converge <- sapply(model_pars_list, function(x) x$converge)
# estimated parameters
coefficients <- t(sapply(model_pars_list, function(x) x$coefficients))
theta <- t(sapply(model_pars_list, function(x) x$theta))
mu <- t(sapply(model_pars_list, function(x) x$mu))
pi <- t(sapply(model_pars_list, function(x) x$pi))
pi[is.na(pi)] <- 0
# obtain randomized quantile residuals as the normalized count
normdata_list <- list()
for (i in 1:nrow(count_toUse)) {
normdata_list[[i]] <- quantile_match(count = count_toUse[i,],
mu = mu[i,], theta = theta[i,], pi = pi[i,],
random = random)
}
names(normdata_list) <- rownames(count_toUse)
ecdf <- do.call("rbind", lapply(normdata_list, function(x) x$pvalue))
normdata <- do.call("rbind", lapply(normdata_list, function(x) x$count_norm))
colnames(normdata) <- colnames(count_toUse)
count <- abundances(data)
count_toUse <- count[taxaIn,]
message(paste0("Removing ", (nrow(count) - nrow(count_toUse)), " rare taxa... \n" ))
## run normalization algorithm
# fit zero-inflated negative binomial regression for each taxa, get the estimated parameters
message(paste0("Fitting models... \n" ))
if(is.null(depth)){
depth_toUse <- colSums(count_toUse)
}else depth_toUse <- depth
if (is.null(ncores)) {ncores <- max(1, parallel::detectCores() - 1)}
if(ncores == 1){
model_pars_list <- apply(count_toUse, 1, fit_zinb, depth = depth_toUse, covar = group)
}else{
message(paste0("Setting up parallel computation using ", ncores, " cores... \n" ))
if (.Platform$OS.type == "windows" | parallelly::supportsMulticore() == FALSE) {
future::plan(future::multisession, workers=ncores)}
else {
future::plan(future::multicore, workers=ncores)}
model_pars_list <- future.apply::future_apply(count_toUse, 1, fit_zinb, depth = depth_toUse, covar = group,
future.seed = FALSE)
}
converge <- sapply(model_pars_list, function(x) x$converge)
library(TaxNorm)
group <- sample_data(TaxNorm_Example_Input)$body_site
HMP_norm <- TaxNorm_Normalization(data = TaxNorm_Example_Input,
depth = NULL,
group = group,
filter.sample.num = 1,
filter.taxa.count = 0,
random = TRUE,
ncores = 1)
knitr::opts_chunk$set(echo = TRUE)
library(TaxNorm)
library(phyloseq)
library(microbiome)
TaxNorm_Normalization(data = TaxNorm_Example_Input,
depth = NULL,
group = group,
filter.sample.num = 1,
filter.taxa.count = 0,
random = TRUE,
ncores = 1)
HMP_norm <- TaxNorm_Normalization(data = TaxNorm_Example_Input,
depth = NULL,
group = group,
filter.sample.num = 1,
filter.taxa.count = 0,
random = TRUE,
ncores = 1)
View(HMP_norm)
HMP_norm[["ecdf"]]
as.data.frame(HMP_norm[[1]])
counts_df <- as.data.frame(HMP_norm[[1]])
View(counts_df)
counts_df <- as.data.frame(HMP_norm[[2]])
View(counts_df)
counts_df <- as.data.frame(HMP_norm[[3]])
library(TaxNorm)
group <- sample_data(TaxNorm_Example_Input)$body_site
HMP_norm <- TaxNorm_Normalization(data = TaxNorm_Example_Input,
depth = NULL,
group = group,
filter.sample.num = 1,
filter.taxa.count = 0,
random = TRUE,
ncores = 1)
knitr::opts_chunk$set(echo = TRUE)
library(TaxNorm)
library(phyloseq)
library(microbiome)
group <- sample_data(TaxNorm_Example_Input)$body_site
HMP_norm <- TaxNorm_Normalization(data = TaxNorm_Example_Input,
depth = NULL,
group = group,
filter.sample.num = 1,
filter.taxa.count = 0,
random = TRUE,
ncores = 1)
View(HMP_norm)
View(HMP_norm[["normdata"]])
View(HMP_norm[["rawdata"]])
model_parameters <- TaxNorm_Model_Parameters(coefficients = coefficients,
mu = mu, theta = theta, pi = pi)
coefficients = coefficients
mu = mu
mu =1
library(TaxNorm)
group <- sample_data(TaxNorm_Example_Input)$body_site
HMP_norm <- TaxNorm_Normalization(data = TaxNorm_Example_Input,
depth = NULL,
group = group,
filter.sample.num = 1,
filter.taxa.count = 0,
random = TRUE,
ncores = 1)
knitr::opts_chunk$set(echo = TRUE)
library(TaxNorm)
library(phyloseq)
library(microbiome)
group <- sample_data(TaxNorm_Example_Input)$body_site
HMP_norm <- TaxNorm_Normalization(data = TaxNorm_Example_Input,
depth = NULL,
group = group,
filter.sample.num = 1,
filter.taxa.count = 0,
random = TRUE,
ncores = 1)
library(TaxNorm)
knitr::opts_chunk$set(echo = TRUE)
library(TaxNorm)
library(phyloseq)
library(microbiome)
group <- sample_data(TaxNorm_Example_Input)$body_site
HMP_norm <- TaxNorm_Normalization(data = TaxNorm_Example_Input,
depth = NULL,
group = group,
filter.sample.num = 1,
filter.taxa.count = 0,
random = TRUE,
ncores = 1)
View(HMP_norm)
HMP_norm[[5]]
library(TaxNorm)
group <- sample_data(TaxNorm_Example_Input)$body_site
HMP_norm <- TaxNorm_Normalization(data = TaxNorm_Example_Input,
depth = NULL,
group = group,
filter.sample.num = 1,
filter.taxa.count = 0,
random = TRUE,
ncores = 1)
knitr::opts_chunk$set(echo = TRUE)
library(TaxNorm)
library(phyloseq)
library(microbiome)
group <- sample_data(TaxNorm_Example_Input)$body_site
HMP_norm <- TaxNorm_Normalization(data = TaxNorm_Example_Input,
depth = NULL,
group = group,
filter.sample.num = 1,
filter.taxa.count = 0,
random = TRUE,
ncores = 1)
View(HMP_norm)
library(TaxNorm)
rawdata(HMP_norm)
rawdata(HMP_norm)
library(TaxNorm)
library(TaxNorm)
library(TaxNorm)
rawdata(HMP_norm)
library(TaxNorm)
library(TaxNorm)
knitr::opts_chunk$set(echo = TRUE)
library(TaxNorm)
library(phyloseq)
library(microbiome)
data("TaxNorm_Example_Input", package = "TaxNorm")
knitr::opts_chunk$set(echo = TRUE)
library(TaxNorm)
library(phyloseq)
library(microbiome)
group <- sample_data(TaxNorm_Example_Input)$body_site
HMP_norm <- TaxNorm_Normalization(data = TaxNorm_Example_Input,
depth = NULL,
group = group,
filter.sample.num = 1,
filter.taxa.count = 0,
random = TRUE,
ncores = 1)
data("TaxNorm_Example_Output", package = "TaxNorm")
View(HMP_norm)
TaxNorm_Example_Output <- HMP_norm
save(TaxNorm_Example_Output, file = "C:\\Users\\Dillon\\OneDrive\\Documents\\GitHub\\TaxNorm\\data\\TaxNorm_Example_Output.rda")
data("TaxNorm_Example_Output", package = "TaxNorm")
library(TaxNorm)
knitr::opts_chunk$set(echo = TRUE)
library(TaxNorm)
library(phyloseq)
library(microbiome)
data("TaxNorm_Example_Output", package = "TaxNorm")
data("TaxNorm_Example_Input", package = "TaxNorm")
View(TaxNorm_Example_Output)
View(TaxNorm_Example_Output)
rawdata(TaxNorm_Example_Output)
View(TaxNorm_Example_Output)
install.packages("vegan")
install.packages("vegan")
install.packages("vegan")
install.packages("vegan")
library(TaxNorm)
library(TaxNorm)
normdata(TaxNorm_Example_Output)
library(TaxNorm)
normdata
normdata()
rawdata()
library(TaxNorm)
library(TaxNorm)
library(TaxNorm)
